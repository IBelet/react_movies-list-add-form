{"version":3,"sources":["components/MovieCard/MovieCard.js","components/MoviesList/MoviesList.js","components/NewMovieInput/NewMovieInput.js","components/NewMovieTextArea/NewMovieTextArea.js","components/NewMovie/NewMovie.js","App.js","index.js"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","defaultProps","MoviesList","movies","map","movie","key","imdbId","NewMovieInput","React","memo","isError","value","handleChange","placeholder","type","name","classNames","input","onChange","propTypes","PropTypes","string","isRequired","bool","func","NewMovieTextArea","initialState","titleError","imgUrlError","imdbUrlError","imdbIdError","isValid","checkUrl","url","match","checkValid","Boolean","trim","NewMovie","state","event","target","setState","handleSubmit","preventDefault","addMovie","props","this","onSubmit","PureComponent","App","moviesFromServer","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.06754db6.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './MovieCard.scss';\n\nexport const MovieCard = ({ title, description, imgUrl, imdbUrl }) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n\nMovieCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  imgUrl: PropTypes.string.isRequired,\n  imdbUrl: PropTypes.string.isRequired,\n};\n\nMovieCard.defaultProps = {\n  description: '',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\nexport const MoviesList = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      description: PropTypes.string,\n      imgUrl: PropTypes.string.isRequired,\n      imdbUrl: PropTypes.string.isRequired,\n    }),\n  ),\n};\n\nMoviesList.defaultProps = {\n  movies: [],\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nexport const NewMovieInput = React.memo(({\n  description,\n  title,\n  isError,\n  value,\n  handleChange,\n  placeholder,\n}) => (\n  <div className=\"field\">\n    <label>\n      <p>\n        {`${description}:`}\n      </p>\n      <input\n        type=\"text\"\n        name={title}\n        placeholder={placeholder}\n        className={classNames({\n          input: true,\n          'is-danger': isError,\n        })}\n        value={value}\n        onChange={handleChange}\n      />\n      {isError\n        && (\n          <p className=\"has-text-danger\">\n            Please fill this field with valid data\n          </p>\n        )\n      }\n    </label>\n  </div>\n));\n\nNewMovieInput.propTypes = {\n  description: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  isError: PropTypes.bool.isRequired,\n  value: PropTypes.string.isRequired,\n  handleChange: PropTypes.func.isRequired,\n  placeholder: PropTypes.string,\n};\n\nNewMovieInput.defaultProps = {\n  placeholder: 'Type something',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const NewMovieTextArea = ({\n  description,\n  placeholder,\n  title,\n  value,\n  handleChange,\n}) => (\n  <div className=\"field\">\n    <label>\n      <p>\n        {`${description}:`}\n      </p>\n      <textarea\n        name={title}\n        placeholder={placeholder}\n        className=\"textarea\"\n        value={value}\n        onChange={handleChange}\n      />\n    </label>\n  </div>\n);\n\nNewMovieTextArea.propTypes = {\n  description: PropTypes.string.isRequired,\n  placeholder: PropTypes.string,\n  title: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  handleChange: PropTypes.func.isRequired,\n};\n\nNewMovieTextArea.defaultProps = {\n  placeholder: 'Type something',\n};\n","import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { NewMovieInput } from '../NewMovieInput/NewMovieInput';\nimport { NewMovieTextArea } from '../NewMovieTextArea/NewMovieTextArea';\n\nconst initialState = {\n  title: '',\n  description: '',\n  imgUrl: '',\n  imdbUrl: '',\n  imdbId: '',\n  titleError: false,\n  imgUrlError: false,\n  imdbUrlError: false,\n  imdbIdError: false,\n  isValid: false,\n};\n\nfunction checkUrl(url) {\n  // eslint-disable-next-line max-len\n  return url.match(/^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[.!/\\\\\\w]*))?)$/);\n}\n\nfunction checkValid(input) {\n  return Boolean(input.trim());\n}\n\nexport class NewMovie extends PureComponent {\n  state = initialState\n\n  handleChange = (event) => {\n    const { name, value } = event.target;\n\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n\n    const { title, description, imgUrl, imdbUrl, imdbId } = this.state;\n    const { addMovie } = this.props;\n    const titleError = !checkValid(title);\n    const imgUrlError = !checkUrl(imgUrl);\n    const imdbUrlError = !checkUrl(imdbUrl);\n    const imdbIdError = !checkValid(imdbId);\n\n    if (titleError || imgUrlError || imdbUrlError || imdbIdError) {\n      this.setState({\n        titleError,\n        imgUrlError,\n        imdbUrlError,\n        imdbIdError,\n      });\n\n      return;\n    }\n\n    const movie = {\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n    };\n\n    addMovie(movie);\n\n    this.setState(initialState);\n  }\n\n  render() {\n    const {\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n      titleError,\n      imgUrlError,\n      imdbUrlError,\n      imdbIdError,\n    } = this.state;\n\n    return (\n      <form\n        onSubmit={this.handleSubmit}\n      >\n        <NewMovieInput\n          description=\"Title\"\n          title=\"title\"\n          isError={titleError}\n          value={title}\n          handleChange={this.handleChange}\n        />\n\n        <NewMovieTextArea\n          description=\"Description\"\n          title=\"description\"\n          value={description}\n          handleChange={this.handleChange}\n        />\n\n        <NewMovieInput\n          description=\"Image link\"\n          placeholder=\"Type valid link\"\n          title=\"imgUrl\"\n          isError={imgUrlError}\n          value={imgUrl}\n          handleChange={this.handleChange}\n        />\n\n        <NewMovieInput\n          description=\"Imdb link\"\n          placeholder=\"Type valid link\"\n          title=\"imdbUrl\"\n          isError={imdbUrlError}\n          value={imdbUrl}\n          handleChange={this.handleChange}\n        />\n\n        <NewMovieInput\n          description=\"Imdb id\"\n          title=\"imdbId\"\n          isError={imdbIdError}\n          value={imdbId}\n          handleChange={this.handleChange}\n        />\n        <button\n          type=\"submit\"\n          className=\"button is-info\"\n        >\n          Add new movie\n        </button>\n      </form>\n    );\n  }\n}\n\nNewMovie.propTypes = {\n  addMovie: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\nexport class App extends Component {\n  state = {\n    movies: moviesFromServer,\n  };\n\n  addMovie = (movie) => {\n    this.setState(state => ({\n      movies: [...state.movies, movie],\n    }));\n  };\n\n  render() {\n    const { movies } = this.state;\n\n    return (\n      <div className=\"page\">\n        <div className=\"page-content\">\n          <MoviesList movies={movies} />\n        </div>\n        <div className=\"sidebar\">\n          <NewMovie addMovie={this.addMovie} />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}